// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  firstName   String
  lastName    String
  username    String       @unique
  password    String
  avatar      String?
  avatarId    String?
  posts       Post[]
  comments    Comment[]
  replies     Reply[] @relation("Replying")
  repliesTo     Reply[] @relation("ReplyingTo")
  postLikes   PostLike[]
  commentLikes CommentLike[]
  replyLikes  ReplyLike[]
  following     Follow[]  @relation("Following")
  followers     Follow[]  @relation("Followers")
  sentMessages      Message[]
  chats Chat[] @relation("UserChats")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Post {
  id        String   @id @default(uuid())
  content   String
  image     String?
  imageId   String?
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  comments  Comment[]
  likes     PostLike[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  replies   Reply[]
  likes     CommentLike[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reply {
  id        String   @id @default(uuid())
  content   String
  comment   Comment     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId    String
  author    User     @relation("Replying", fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  replyingTo User @relation("ReplyingTo", fields: [replyingToId], references: [id], onDelete: Cascade)
  replyingToId String
  likes     ReplyLike[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostLike {
  id        String @id @default(uuid())
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model CommentLike {
  id        String @id @default(uuid())
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}

model ReplyLike {
  id        String @id @default(uuid())
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  reply   Reply @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId String
  createdAt DateTime @default(now())

  @@unique([userId, replyId])
}

model Follow {
  id            String   @id @default(uuid())
  follower      User     @relation("Following", fields: [followerId], references: [id])
  followerId    String
  following     User     @relation("Followers", fields: [followingId], references: [id])
  followingId   String
  createdAt     DateTime @default(now())

  @@unique([followerId, followingId])
}

model Chat {
  id              String     @id @default(uuid())
  participants User[]     @relation("UserChats")
  messages        Message[] @relation("Messages")
  lastMessage     Message?   @relation("LastMessage", fields: [lastMessageId], references: [id])
  lastMessageId   String? @unique
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Message {
  id        String   @id @default(uuid())
  chat      Chat     @relation("Messages", fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  chatLastMessage Chat? @relation("LastMessage")
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  content   String
  createdAt DateTime @default(now())
}
