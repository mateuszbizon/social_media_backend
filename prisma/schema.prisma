// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  firstName   String
  lastName    String
  username    String       @unique
  password    String
  avatar      String?
  avatarId    String?
  posts       Post[]
  comments    Comment[]
  postLikes   PostLike[]
  commentLikes CommentLike[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Post {
  id        String   @id @default(uuid())
  content   String
  image     String?
  imageId   String?
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  comments  Comment[]
  likes     PostLike[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  likes     CommentLike[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostLike {
  id        String @id @default(uuid())
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model CommentLike {
  id        String @id @default(uuid())
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}